#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Library.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="library")]
	public partial class LibraryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertbook(book instance);
    partial void Updatebook(book instance);
    partial void Deletebook(book instance);
    partial void Insertevent(@event instance);
    partial void Updateevent(@event instance);
    partial void Deleteevent(@event instance);
    partial void Insertreader(reader instance);
    partial void Updatereader(reader instance);
    partial void Deletereader(reader instance);
    partial void Insertstate(state instance);
    partial void Updatestate(state instance);
    partial void Deletestate(state instance);
    #endregion
		
		public LibraryDataContext() : 
				base(global::Library.Data.Properties.Settings.Default.libraryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<book> books
		{
			get
			{
				return this.GetTable<book>();
			}
		}
		
		public System.Data.Linq.Table<@event> events
		{
			get
			{
				return this.GetTable<@event>();
			}
		}
		
		public System.Data.Linq.Table<reader> readers
		{
			get
			{
				return this.GetTable<reader>();
			}
		}
		
		public System.Data.Linq.Table<state> states
		{
			get
			{
				return this.GetTable<state>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.book")]
	public partial class book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _book_id;
		
		private string _author;
		
		private string _title;
		
		private System.Nullable<int> _publishment_year;
		
		private string _genre;
		
		private EntitySet<state> _states;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbook_idChanging(int value);
    partial void Onbook_idChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Onpublishment_yearChanging(System.Nullable<int> value);
    partial void Onpublishment_yearChanged();
    partial void OngenreChanging(string value);
    partial void OngenreChanged();
    #endregion
		
		public book()
		{
			this._states = new EntitySet<state>(new Action<state>(this.attach_states), new Action<state>(this.detach_states));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int book_id
		{
			get
			{
				return this._book_id;
			}
			set
			{
				if ((this._book_id != value))
				{
					this.Onbook_idChanging(value);
					this.SendPropertyChanging();
					this._book_id = value;
					this.SendPropertyChanged("book_id");
					this.Onbook_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="VarChar(50)")]
		public string author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_publishment_year", DbType="Int")]
		public System.Nullable<int> publishment_year
		{
			get
			{
				return this._publishment_year;
			}
			set
			{
				if ((this._publishment_year != value))
				{
					this.Onpublishment_yearChanging(value);
					this.SendPropertyChanging();
					this._publishment_year = value;
					this.SendPropertyChanged("publishment_year");
					this.Onpublishment_yearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genre", DbType="VarChar(30)")]
		public string genre
		{
			get
			{
				return this._genre;
			}
			set
			{
				if ((this._genre != value))
				{
					this.OngenreChanging(value);
					this.SendPropertyChanging();
					this._genre = value;
					this.SendPropertyChanged("genre");
					this.OngenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="book_state", Storage="_states", ThisKey="book_id", OtherKey="book")]
		public EntitySet<state> states
		{
			get
			{
				return this._states;
			}
			set
			{
				this._states.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_states(state entity)
		{
			this.SendPropertyChanging();
			entity.book1 = this;
		}
		
		private void detach_states(state entity)
		{
			this.SendPropertyChanging();
			entity.book1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.event")]
	public partial class @event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _event_id;
		
		private System.DateTime _event_time;
		
		private bool _is_borrowing_event;
		
		private int _state;
		
		private int _reader;
		
		private EntityRef<reader> _reader1;
		
		private EntityRef<state> _state1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onevent_idChanging(int value);
    partial void Onevent_idChanged();
    partial void Onevent_timeChanging(System.DateTime value);
    partial void Onevent_timeChanged();
    partial void Onis_borrowing_eventChanging(bool value);
    partial void Onis_borrowing_eventChanged();
    partial void OnstateChanging(int value);
    partial void OnstateChanged();
    partial void OnreaderChanging(int value);
    partial void OnreaderChanged();
    #endregion
		
		public @event()
		{
			this._reader1 = default(EntityRef<reader>);
			this._state1 = default(EntityRef<state>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_time", DbType="Date NOT NULL")]
		public System.DateTime event_time
		{
			get
			{
				return this._event_time;
			}
			set
			{
				if ((this._event_time != value))
				{
					this.Onevent_timeChanging(value);
					this.SendPropertyChanging();
					this._event_time = value;
					this.SendPropertyChanged("event_time");
					this.Onevent_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_borrowing_event", DbType="Bit NOT NULL")]
		public bool is_borrowing_event
		{
			get
			{
				return this._is_borrowing_event;
			}
			set
			{
				if ((this._is_borrowing_event != value))
				{
					this.Onis_borrowing_eventChanging(value);
					this.SendPropertyChanging();
					this._is_borrowing_event = value;
					this.SendPropertyChanged("is_borrowing_event");
					this.Onis_borrowing_eventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="Int NOT NULL")]
		public int state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					if (this._state1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reader", DbType="Int NOT NULL")]
		public int reader
		{
			get
			{
				return this._reader;
			}
			set
			{
				if ((this._reader != value))
				{
					if (this._reader1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnreaderChanging(value);
					this.SendPropertyChanging();
					this._reader = value;
					this.SendPropertyChanged("reader");
					this.OnreaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="reader_event", Storage="_reader1", ThisKey="reader", OtherKey="reader_id", IsForeignKey=true)]
		public reader reader1
		{
			get
			{
				return this._reader1.Entity;
			}
			set
			{
				reader previousValue = this._reader1.Entity;
				if (((previousValue != value) 
							|| (this._reader1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._reader1.Entity = null;
						previousValue.events.Remove(this);
					}
					this._reader1.Entity = value;
					if ((value != null))
					{
						value.events.Add(this);
						this._reader = value.reader_id;
					}
					else
					{
						this._reader = default(int);
					}
					this.SendPropertyChanged("reader1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="state_event", Storage="_state1", ThisKey="state", OtherKey="state_id", IsForeignKey=true)]
		public state state1
		{
			get
			{
				return this._state1.Entity;
			}
			set
			{
				state previousValue = this._state1.Entity;
				if (((previousValue != value) 
							|| (this._state1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._state1.Entity = null;
						previousValue.events.Remove(this);
					}
					this._state1.Entity = value;
					if ((value != null))
					{
						value.events.Add(this);
						this._state = value.state_id;
					}
					else
					{
						this._state = default(int);
					}
					this.SendPropertyChanged("state1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reader")]
	public partial class reader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reader_id;
		
		private string _reader_f_name;
		
		private string _reader_l_name;
		
		private EntitySet<@event> _events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onreader_idChanging(int value);
    partial void Onreader_idChanged();
    partial void Onreader_f_nameChanging(string value);
    partial void Onreader_f_nameChanged();
    partial void Onreader_l_nameChanging(string value);
    partial void Onreader_l_nameChanged();
    #endregion
		
		public reader()
		{
			this._events = new EntitySet<@event>(new Action<@event>(this.attach_events), new Action<@event>(this.detach_events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reader_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int reader_id
		{
			get
			{
				return this._reader_id;
			}
			set
			{
				if ((this._reader_id != value))
				{
					this.Onreader_idChanging(value);
					this.SendPropertyChanging();
					this._reader_id = value;
					this.SendPropertyChanged("reader_id");
					this.Onreader_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reader_f_name", DbType="VarChar(50)")]
		public string reader_f_name
		{
			get
			{
				return this._reader_f_name;
			}
			set
			{
				if ((this._reader_f_name != value))
				{
					this.Onreader_f_nameChanging(value);
					this.SendPropertyChanging();
					this._reader_f_name = value;
					this.SendPropertyChanged("reader_f_name");
					this.Onreader_f_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reader_l_name", DbType="VarChar(50)")]
		public string reader_l_name
		{
			get
			{
				return this._reader_l_name;
			}
			set
			{
				if ((this._reader_l_name != value))
				{
					this.Onreader_l_nameChanging(value);
					this.SendPropertyChanging();
					this._reader_l_name = value;
					this.SendPropertyChanged("reader_l_name");
					this.Onreader_l_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="reader_event", Storage="_events", ThisKey="reader_id", OtherKey="reader")]
		public EntitySet<@event> events
		{
			get
			{
				return this._events;
			}
			set
			{
				this._events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.reader1 = this;
		}
		
		private void detach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.reader1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.state")]
	public partial class state : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _state_id;
		
		private bool _is_borrowed;
		
		private int _book;
		
		private EntitySet<@event> _events;
		
		private EntityRef<book> _book1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstate_idChanging(int value);
    partial void Onstate_idChanged();
    partial void Onis_borrowedChanging(bool value);
    partial void Onis_borrowedChanged();
    partial void OnbookChanging(int value);
    partial void OnbookChanged();
    #endregion
		
		public state()
		{
			this._events = new EntitySet<@event>(new Action<@event>(this.attach_events), new Action<@event>(this.detach_events));
			this._book1 = default(EntityRef<book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int state_id
		{
			get
			{
				return this._state_id;
			}
			set
			{
				if ((this._state_id != value))
				{
					this.Onstate_idChanging(value);
					this.SendPropertyChanging();
					this._state_id = value;
					this.SendPropertyChanged("state_id");
					this.Onstate_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_borrowed", DbType="Bit NOT NULL")]
		public bool is_borrowed
		{
			get
			{
				return this._is_borrowed;
			}
			set
			{
				if ((this._is_borrowed != value))
				{
					this.Onis_borrowedChanging(value);
					this.SendPropertyChanging();
					this._is_borrowed = value;
					this.SendPropertyChanged("is_borrowed");
					this.Onis_borrowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book", DbType="Int NOT NULL")]
		public int book
		{
			get
			{
				return this._book;
			}
			set
			{
				if ((this._book != value))
				{
					if (this._book1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbookChanging(value);
					this.SendPropertyChanging();
					this._book = value;
					this.SendPropertyChanged("book");
					this.OnbookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="state_event", Storage="_events", ThisKey="state_id", OtherKey="state")]
		public EntitySet<@event> events
		{
			get
			{
				return this._events;
			}
			set
			{
				this._events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="book_state", Storage="_book1", ThisKey="book", OtherKey="book_id", IsForeignKey=true)]
		public book book1
		{
			get
			{
				return this._book1.Entity;
			}
			set
			{
				book previousValue = this._book1.Entity;
				if (((previousValue != value) 
							|| (this._book1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._book1.Entity = null;
						previousValue.states.Remove(this);
					}
					this._book1.Entity = value;
					if ((value != null))
					{
						value.states.Add(this);
						this._book = value.book_id;
					}
					else
					{
						this._book = default(int);
					}
					this.SendPropertyChanged("book1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.state1 = this;
		}
		
		private void detach_events(@event entity)
		{
			this.SendPropertyChanging();
			entity.state1 = null;
		}
	}
}
#pragma warning restore 1591
